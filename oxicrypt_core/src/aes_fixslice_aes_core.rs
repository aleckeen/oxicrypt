unsafe fn sbox(v: *mut u32)
{
  let u0: u32 = *v.add(0);
  let u1: u32 = *v.add(1);
  let u2: u32 = *v.add(2);
  let u3: u32 = *v.add(3);
  let u4: u32 = *v.add(4);
  let u5: u32 = *v.add(5);
  let u6: u32 = *v.add(6);
  let u7: u32 = *v.add(7);

  let y14: u32 = u3 ^ u5;
  let y13: u32 = u0 ^ u6;
  let y9: u32 = u0 ^ u3;
  let y8: u32 = u0 ^ u5;
  let t0: u32 = u1 ^ u2;
  let y1: u32 = t0 ^ u7;
  let y4: u32 = y1 ^ u3;
  let y12: u32 = y13 ^ y14;
  let y2: u32 = y1 ^ u0;
  let y5: u32 = y1 ^ u6;
  let y3: u32 = y5 ^ y8;
  let t1: u32 = u4 ^ y12;
  let y15: u32 = t1 ^ u5;
  let y20: u32 = t1 ^ u1;
  let y6: u32 = y15 ^ u7;
  let y10: u32 = y15 ^ t0;
  let y11: u32 = y20 ^ y9;
  let y7: u32 = u7 ^ y11;
  let y17: u32 = y10 ^ y11;
  let y19: u32 = y10 ^ y8;
  let y16: u32 = t0 ^ y11;
  let y21: u32 = y13 ^ y16;
  let y18: u32 = u0 ^ y16;
  let t2: u32 = y12 & y15;
  let t3: u32 = y3 & y6;
  let t4: u32 = t3 ^ t2;
  let t5: u32 = y4 & u7;
  let t6: u32 = t5 ^ t2;
  let t7: u32 = y13 & y16;
  let t8: u32 = y5 & y1;
  let t9: u32 = t8 ^ t7;
  let t10: u32 = y2 & y7;
  let t11: u32 = t10 ^ t7;
  let t12: u32 = y9 & y11;
  let t13: u32 = y14 & y17;
  let t14: u32 = t13 ^ t12;
  let t15: u32 = y8 & y10;
  let t16: u32 = t15 ^ t12;
  let t17: u32 = t4 ^ y20;
  let t18: u32 = t6 ^ t16;
  let t19: u32 = t9 ^ t14;
  let t20: u32 = t11 ^ t16;
  let t21: u32 = t17 ^ t14;
  let t22: u32 = t18 ^ y19;
  let t23: u32 = t19 ^ y21;
  let t24: u32 = t20 ^ y18;
  let t25: u32 = t21 ^ t22;
  let t26: u32 = t21 & t23;
  let t27: u32 = t24 ^ t26;
  let t28: u32 = t25 & t27;
  let t29: u32 = t28 ^ t22;
  let t30: u32 = t23 ^ t24;
  let t31: u32 = t22 ^ t26;
  let t32: u32 = t31 & t30;
  let t33: u32 = t32 ^ t24;
  let t34: u32 = t23 ^ t33;
  let t35: u32 = t27 ^ t33;
  let t36: u32 = t24 & t35;
  let t37: u32 = t36 ^ t34;
  let t38: u32 = t27 ^ t36;
  let t39: u32 = t29 & t38;
  let t40: u32 = t25 ^ t39;
  let t41: u32 = t40 ^ t37;
  let t42: u32 = t29 ^ t33;
  let t43: u32 = t29 ^ t40;
  let t44: u32 = t33 ^ t37;
  let t45: u32 = t42 ^ t41;
  let z0: u32 = t44 & y15;
  let z1: u32 = t37 & y6;
  let z2: u32 = t33 & u7;
  let z3: u32 = t43 & y16;
  let z4: u32 = t40 & y1;
  let z5: u32 = t29 & y7;
  let z6: u32 = t42 & y11;
  let z7: u32 = t45 & y17;
  let z8: u32 = t41 & y10;
  let z9: u32 = t44 & y12;
  let z10: u32 = t37 & y3;
  let z11: u32 = t33 & y4;
  let z12: u32 = t43 & y13;
  let z13: u32 = t40 & y5;
  let z14: u32 = t29 & y2;
  let z15: u32 = t42 & y9;
  let z16: u32 = t45 & y14;
  let z17: u32 = t41 & y8;
  let tc1: u32 = z15 ^ z16;
  let tc2: u32 = z10 ^ tc1;
  let tc3: u32 = z9 ^ tc2;
  let tc4: u32 = z0 ^ z2;
  let tc5: u32 = z1 ^ z0;
  let tc6: u32 = z3 ^ z4;
  let tc7: u32 = z12 ^ tc4;
  let tc8: u32 = z7 ^ tc6;
  let tc9: u32 = z8 ^ tc7;
  let tc10: u32 = tc8 ^ tc9;
  let tc11: u32 = tc6 ^ tc5;
  let tc12: u32 = z3 ^ z5;
  let tc13: u32 = z13 ^ tc1;
  let tc14: u32 = tc4 ^ tc12;
  let s3: u32 = tc3 ^ tc11;
  let tc16: u32 = z6 ^ tc8;
  let tc17: u32 = z14 ^ tc10;
  let tc18: u32 = !tc13 ^ tc14;
  let s7: u32 = z12 ^ tc18;
  let tc20: u32 = z15 ^ tc16;
  let tc21: u32 = tc2 ^ z11;
  let s0: u32 = tc3 ^ tc16;
  let s6: u32 = tc10 ^ tc18;
  let s4: u32 = tc14 ^ s3;
  let s1: u32 = !(s3 ^ tc16);
  let tc26: u32 = tc17 ^ tc20;
  let s2: u32 = !(tc26 ^ z17);
  let s5: u32 = tc21 ^ tc17;

  *v.add(0) = s0;
  *v.add(1) = s1;
  *v.add(2) = s2;
  *v.add(3) = s3;
  *v.add(4) = s4;
  *v.add(5) = s5;
  *v.add(6) = s6;
  *v.add(7) = s7;
}

unsafe fn inv_sbox(v: *mut u32)
{
  let u0: u32 = *v.add(0);
  let u1: u32 = *v.add(1);
  let u2: u32 = *v.add(2);
  let u3: u32 = *v.add(3);
  let u4: u32 = *v.add(4);
  let u5: u32 = *v.add(5);
  let u6: u32 = *v.add(6);
  let u7: u32 = *v.add(7);

  let y0: u32 = u0 ^ u3;
  let y2: u32 = !(u1 ^ u3);
  let y4: u32 = u0 ^ y2;
  let rtl0: u32 = u6 ^ u7;
  let y1: u32 = y2 ^ rtl0;
  let y7: u32 = !(u2 ^ y1);
  let rtl1: u32 = u3 ^ u4;
  let y6: u32 = !(u7 ^ rtl1);
  let y3: u32 = y1 ^ rtl1;
  let rtl2: u32 = !(u0 ^ u2);
  let y5: u32 = u5 ^ rtl2;
  let sa1: u32 = y0 ^ y2;
  let sa0: u32 = y1 ^ y3;
  let sb1: u32 = y4 ^ y6;
  let sb0: u32 = y5 ^ y7;
  let ah: u32 = y0 ^ y1;
  let al: u32 = y2 ^ y3;
  let aa: u32 = sa0 ^ sa1;
  let bh: u32 = y4 ^ y5;
  let bl: u32 = y6 ^ y7;
  let bb: u32 = sb0 ^ sb1;
  let ab20: u32 = sa0 ^ sb0;
  let ab22: u32 = al ^ bl;
  let ab23: u32 = y3 ^ y7;
  let ab21: u32 = sa1 ^ sb1;
  let abcd1: u32 = ah & bh;
  let rr1: u32 = y0 & y4;
  let ph11: u32 = ab20 ^ abcd1;
  let t01: u32 = y1 & y5;
  let ph01: u32 = t01 ^ abcd1;
  let abcd2: u32 = al & bl;
  let r1: u32 = y2 & y6;
  let pl11: u32 = ab22 ^ abcd2;
  let r2: u32 = y3 & y7;
  let pl01: u32 = r2 ^ abcd2;
  let r3: u32 = sa0 & sb0;
  let vr1: u32 = aa & bb;
  let pr1: u32 = vr1 ^ r3;
  let wr1: u32 = sa1 & sb1;
  let qr1: u32 = wr1 ^ r3;
  let ab0: u32 = ph11 ^ rr1;
  let ab1: u32 = ph01 ^ ab21;
  let ab2: u32 = pl11 ^ r1;
  let ab3: u32 = pl01 ^ qr1;
  let cp1: u32 = ab0 ^ pr1;
  let cp2: u32 = ab1 ^ qr1;
  let cp3: u32 = ab2 ^ pr1;
  let cp4: u32 = ab3 ^ ab23;
  let tinv1: u32 = cp3 ^ cp4;
  let tinv2: u32 = cp3 & cp1;
  let tinv3: u32 = cp2 ^ tinv2;
  let tinv4: u32 = cp1 ^ cp2;
  let tinv5: u32 = cp4 ^ tinv2;
  let tinv6: u32 = tinv5 & tinv4;
  let tinv7: u32 = tinv3 & tinv1;
  let d2: u32 = cp4 ^ tinv7;
  let d0: u32 = cp2 ^ tinv6;
  let tinv8: u32 = cp1 & cp4;
  let tinv9: u32 = tinv4 & tinv8;
  let tinv10: u32 = tinv4 ^ tinv2;
  let d1: u32 = tinv9 ^ tinv10;
  let tinv11: u32 = cp2 & cp3;
  let tinv12: u32 = tinv1 & tinv11;
  let tinv13: u32 = tinv1 ^ tinv2;
  let d3: u32 = tinv12 ^ tinv13;
  let sd1: u32 = d1 ^ d3;
  let sd0: u32 = d0 ^ d2;
  let dl: u32 = d0 ^ d1;
  let dh: u32 = d2 ^ d3;
  let dd: u32 = sd0 ^ sd1;
  let abcd3: u32 = dh & bh;
  let rr2: u32 = d3 & y4;
  let t02: u32 = d2 & y5;
  let abcd4: u32 = dl & bl;
  let r4: u32 = d1 & y6;
  let r5: u32 = d0 & y7;
  let r6: u32 = sd0 & sb0;
  let vr2: u32 = dd & bb;
  let wr2: u32 = sd1 & sb1;
  let abcd5: u32 = dh & ah;
  let r7: u32 = d3 & y0;
  let r8: u32 = d2 & y1;
  let abcd6: u32 = dl & al;
  let r9: u32 = d1 & y2;
  let r10: u32 = d0 & y3;
  let r11: u32 = sd0 & sa0;
  let vr3: u32 = dd & aa;
  let wr3: u32 = sd1 & sa1;
  let ph12: u32 = rr2 ^ abcd3;
  let ph02: u32 = t02 ^ abcd3;
  let pl12: u32 = r4 ^ abcd4;
  let pl02: u32 = r5 ^ abcd4;
  let pr2: u32 = vr2 ^ r6;
  let qr2: u32 = wr2 ^ r6;
  let p0: u32 = ph12 ^ pr2;
  let p1: u32 = ph02 ^ qr2;
  let p2: u32 = pl12 ^ pr2;
  let p3: u32 = pl02 ^ qr2;
  let ph13: u32 = r7 ^ abcd5;
  let ph03: u32 = r8 ^ abcd5;
  let pl13: u32 = r9 ^ abcd6;
  let pl03: u32 = r10 ^ abcd6;
  let pr3: u32 = vr3 ^ r11;
  let qr3: u32 = wr3 ^ r11;
  let p4: u32 = ph13 ^ pr3;
  let s7: u32 = ph03 ^ qr3;
  let p6: u32 = pl13 ^ pr3;
  let p7: u32 = pl03 ^ qr3;
  let s3: u32 = p1 ^ p6;
  let s6: u32 = p2 ^ p6;
  let s0: u32 = p3 ^ p6;
  let x11: u32 = p0 ^ p2;
  let s5: u32 = s0 ^ x11;
  let x13: u32 = p4 ^ p7;
  let x14: u32 = x11 ^ x13;
  let s1: u32 = s3 ^ x14;
  let x16: u32 = p1 ^ s7;
  let s2: u32 = x14 ^ x16;
  let x18: u32 = p0 ^ p4;
  let x19: u32 = s5 ^ x16;
  let s4: u32 = x18 ^ x19;

  *v.add(0) = s0;
  *v.add(1) = s1;
  *v.add(2) = s2;
  *v.add(3) = s3;
  *v.add(4) = s4;
  *v.add(5) = s5;
  *v.add(6) = s6;
  *v.add(7) = s7;
}

unsafe fn shift_rows(b: *mut u32)
  {

  }
